library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike %>%
filter(season ==4)
bike %>%
filter(weather == 4)
# Make season a factor
bike$season <- as.factor(bike$season)
bike %>%
filter(weather == 4 | weather == 3)
bike %>%
filter(weather == !4)
bike %>%
filter(weather !=4)
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
# Take out weather == 4 since there is only one
bike <- bike %>%
filter(weather !=4)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_rm(casual, registered)
my_recipe
bike
view(bike)
bike %>%
mutate(weather = ifelse(weather = 4,3,weather))
bike %>%
mutate(weather = ifelse(weather = 4,3,weather))
bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(timestamp, features=c("hour"))
prepped_recipe <- prep(my_recipe)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data = bikes_clean)
bake(prepped_recipe, new_data = bikes)
bake(prepped_recipe, new_data = bike)
view(bike)
bake(prepped_recipe, new_data = bike)
view(bike)
step_date(datetime, features = 'dow)'
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data = bike)
view(bake(prepped_recipe, new_data = bike))
my_recipe <- recipe(count ~ ., data = bike) %>%
step_date(datetime, features = 'dow')
prepped_recipe <- prep(my_recipe)
view(bake(prepped_recipe, new_data = bike))
my_recipe <- recipe(count ~ ., data = bike) %>%
step_date(datetime, features = 'dow') %>%
step_rm(registered, casual)
prepped_recipe <- prep(my_recipe)
view(bake(prepped_recipe, new_data = bike))
my_recipe <- recipe(count ~ ., data = bike) %>%
step_date(datetime, features = 'dow') %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
view(bake(prepped_recipe, new_data = bike))
bike_clean <- bake(prepped_recipe, new_data = bike)
view(bike_clean)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
# Take out weather == 4 since there is only one
bike %>%
filter(weather !=4)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_date(datetime, features = 'dow') %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
test$season <- as.factor(bike$season)
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike_clean) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
view(test)
view(test)
bike %>%
select(-casual, -registered)
view(bike %>%
select(-casual, -registered))
bike <- bike %>%
select(-casual, -registered)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_date(datetime, features = 'dow') %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_predictions <- predict(bike_workflow,
new_data = test)
view(bike)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike_clean) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather)) %>%
select(-casual, -registered)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather)) %>%
# Make factors
bike$season <- as.factor(bike$season)
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour"))
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour"))
test$season <- as.factor(test$season)
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
rm(list=ls())
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather))
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_predictions
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_predictions
bike_predictions[bike_predictions < 0] <- 1
bike_predictions
# Round negative numbers to 1 because we can't have negatives
bike_predictions[bike_predictions < 0] <- 0
bike_predictions
bike_predictions[bike_predictions < 0] <- 0
bike_predictions
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
# Round negative numbers to 1 because we can't have negatives
bike_predictions[bike_predictions < 0] <- 0
bike_predictions
predictions <- data.frame(bike$datetime, bike$count)
head(predictions)
colnames(predictions) <- c('datetime', 'count')
head(predictions)
vroom_write(predictions, 'csv', ",")
vroom_write(predictions, 'predictions.csv', ",")
predictions$datetime <- as.character(predictions$datetime)
vroom_write(predictions, 'predictions.csv', ",")
view(bike_predictions)
predictions <- data.frame(test$datetime, test$count)
colnames(predictions) <- c('datetime', 'count')
head(predictions)
predictions <- data.frame(test$datetime, bike_predictions)
colnames(predictions) <- c('datetime', 'count')
head(predictions)
predictions$datetime <- as.character(predictions$datetime)
vroom_write(predictions, 'predictions.csv', ",")
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
# Round negative numbers to 1 because we can't have negatives
bike_predictions[bike_predictions < 0] <- 0
view(bike_predictions)
# Create a dataframe that only has datetime and predictions (To upload to Kaggle)
predictions <- data.frame(test$datetime, bike_predictions)
colnames(predictions) <- c('datetime', 'count')
# Change formatting of datetime
predictions$datetime <- as.character(predictions$datetime)
# Write that dataset to a csv file
vroom_write(predictions, 'predictions.csv', ",")
# Look at the fitted LM model
extract_fit_engine(bike_workflow) %>%
tidy()
extract_fit_engine(bike_workflow) %>%
summary
# Poisson Regression ------------------------------------------------------
pois_mod <- poisson_reg() %>% # Type of model
set_engine('glm') #Engine = What R Function to use
bike_pois_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(pois_mod) %>%
fit(data = bike) # Fit the workflow
bike_pois_predictions <- predict(bike_pois_workflow,
new_data = test)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
# Round negative numbers to 1 because we can't have negatives
bike_predictions[bike_predictions < 0] <- 0
view(bike_predictions)
# Create a dataframe that only has datetime and predictions (To upload to Kaggle)
predictions <- data.frame(test$datetime, bike_predictions)
colnames(predictions) <- c('datetime', 'count')
# Change formatting of datetime
predictions$datetime <- as.character(predictions$datetime)
# Look at the fitted LM model
extract_fit_engine(bike_workflow) %>%
tidy()
extract_fit_engine(bike_workflow) %>%
summary
# Poisson Regression ------------------------------------------------------
pois_mod <- poisson_reg() %>% # Type of model
set_engine('glm') #Engine = What R Function to use
bike_pois_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(pois_mod) %>%
fit(data = bike) # Fit the workflow
bike_pois_predictions <- predict(bike_pois_workflow,
new_data = test)
bike_pois_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(pois_mod) %>%
fit(data = bike) # Fit the workflow
bike_pois_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(pois_mod) %>%
fit(data = bike) # Fit the workflow
install.packages('poissonreg')
library(poissonreg)
bike_pois_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(pois_mod) %>%
fit(data = bike) # Fit the workflow
bike_pois_predictions <- predict(bike_pois_workflow,
new_data = test)
bike_pois_predictions
bike_pois_predictions[bike_pois_predictions < 0]
# Create a dataframe that only has datetime and predictions (To upload to Kaggle)
pois_predictions <- data.frame(test$datetime, bike_pois_predictions)
colnames(pois_predictions) <- c('datetime', 'count')
# Change formatting of datetime
pois_predictions$datetime <- as.character(pois_predictions$datetime)
# Write that dataset to a csv file
vroom_write(pois_predictions, 'pois_predictions.csv', ",")
