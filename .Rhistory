bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_predictions <- predict(bike_workflow,
new_data = test)
view(bike)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike_clean) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather)) %>%
select(-casual, -registered)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather)) %>%
# Make factors
bike$season <- as.factor(bike$season)
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour"))
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour"))
test$season <- as.factor(test$season)
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
rm(list=ls())
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather))
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_predictions
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_predictions
bike_predictions[bike_predictions < 0] <- 1
bike_predictions
# Round negative numbers to 1 because we can't have negatives
bike_predictions[bike_predictions < 0] <- 0
bike_predictions
bike_predictions[bike_predictions < 0] <- 0
bike_predictions
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
# Round negative numbers to 1 because we can't have negatives
bike_predictions[bike_predictions < 0] <- 0
bike_predictions
predictions <- data.frame(bike$datetime, bike$count)
head(predictions)
colnames(predictions) <- c('datetime', 'count')
head(predictions)
vroom_write(predictions, 'csv', ",")
vroom_write(predictions, 'predictions.csv', ",")
predictions$datetime <- as.character(predictions$datetime)
vroom_write(predictions, 'predictions.csv', ",")
view(bike_predictions)
predictions <- data.frame(test$datetime, test$count)
colnames(predictions) <- c('datetime', 'count')
head(predictions)
predictions <- data.frame(test$datetime, bike_predictions)
colnames(predictions) <- c('datetime', 'count')
head(predictions)
predictions$datetime <- as.character(predictions$datetime)
vroom_write(predictions, 'predictions.csv', ",")
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
# Round negative numbers to 1 because we can't have negatives
bike_predictions[bike_predictions < 0] <- 0
view(bike_predictions)
# Create a dataframe that only has datetime and predictions (To upload to Kaggle)
predictions <- data.frame(test$datetime, bike_predictions)
colnames(predictions) <- c('datetime', 'count')
# Change formatting of datetime
predictions$datetime <- as.character(predictions$datetime)
# Write that dataset to a csv file
vroom_write(predictions, 'predictions.csv', ",")
# Look at the fitted LM model
extract_fit_engine(bike_workflow) %>%
tidy()
extract_fit_engine(bike_workflow) %>%
summary
# Poisson Regression ------------------------------------------------------
pois_mod <- poisson_reg() %>% # Type of model
set_engine('glm') #Engine = What R Function to use
bike_pois_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(pois_mod) %>%
fit(data = bike) # Fit the workflow
bike_pois_predictions <- predict(bike_pois_workflow,
new_data = test)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
# Round negative numbers to 1 because we can't have negatives
bike_predictions[bike_predictions < 0] <- 0
view(bike_predictions)
# Create a dataframe that only has datetime and predictions (To upload to Kaggle)
predictions <- data.frame(test$datetime, bike_predictions)
colnames(predictions) <- c('datetime', 'count')
# Change formatting of datetime
predictions$datetime <- as.character(predictions$datetime)
# Look at the fitted LM model
extract_fit_engine(bike_workflow) %>%
tidy()
extract_fit_engine(bike_workflow) %>%
summary
# Poisson Regression ------------------------------------------------------
pois_mod <- poisson_reg() %>% # Type of model
set_engine('glm') #Engine = What R Function to use
bike_pois_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(pois_mod) %>%
fit(data = bike) # Fit the workflow
bike_pois_predictions <- predict(bike_pois_workflow,
new_data = test)
bike_pois_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(pois_mod) %>%
fit(data = bike) # Fit the workflow
bike_pois_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(pois_mod) %>%
fit(data = bike) # Fit the workflow
install.packages('poissonreg')
library(poissonreg)
bike_pois_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(pois_mod) %>%
fit(data = bike) # Fit the workflow
bike_pois_predictions <- predict(bike_pois_workflow,
new_data = test)
bike_pois_predictions
bike_pois_predictions[bike_pois_predictions < 0]
# Create a dataframe that only has datetime and predictions (To upload to Kaggle)
pois_predictions <- data.frame(test$datetime, bike_pois_predictions)
colnames(pois_predictions) <- c('datetime', 'count')
# Change formatting of datetime
pois_predictions$datetime <- as.character(pois_predictions$datetime)
# Write that dataset to a csv file
vroom_write(pois_predictions, 'pois_predictions.csv', ",")
install.packages('glmnet')
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
library(poissonreg)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
log_bike <- bike %>%
mutate(count=log(count))
# Penalized Regression ----------------------------------------------------
log_recipe <- recipe(count ~ ., data = log_bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
## Penalized regression model10
preg_model <- linear_reg(penalty=, mixture=) %>% #Set model and tuning11
set_engine("glmnet") # Function to fit in R12
preg_wf <- workflow() %>%
add_recipe(log_recipe) %>%
add_model(preg_model) %>%
fit(data = log_bike)
# Penalized Regression ----------------------------------------------------
log_recipe <- recipe(count ~ ., data = log_bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes"))) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
## Penalized regression model10
preg_model <- linear_reg(penalty=, mixture=) %>% #Set model and tuning11
set_engine("glmnet") # Function to fit in R12
preg_wf <- workflow() %>%
add_recipe(log_recipe) %>%
add_model(preg_model) %>%
fit(data = log_bike)
predict(preg_wf, new_data = test)
## Penalized regression model10
preg_model <- linear_reg(penalty=0, mixture=0) %>% #Set model and tuning11
set_engine("glmnet") # Function to fit in R12
preg_wf <- workflow() %>%
add_recipe(log_recipe) %>%
add_model(preg_model) %>%
fit(data = log_bike)
predict(preg_wf, new_data = test)
## Penalized regression model10
preg_model <- linear_reg(penalty=1, mixture=1) %>% #Set model and tuning11
set_engine("glmnet") # Function to fit in R12
preg_wf <- workflow() %>%
add_recipe(log_recipe) %>%
add_model(preg_model) %>%
fit(data = log_bike)
predict(preg_wf, new_data = test)
## Penalized regression model10
preg_model <- linear_reg(penalty=1) %>% #Set model and tuning11
set_engine("glmnet") # Function to fit in R12
preg_wf <- workflow() %>%
add_recipe(log_recipe) %>%
add_model(preg_model) %>%
fit(data = log_bike)
predict(preg_wf, new_data = test)
log_bike <- bike %>%
mutate(count=log(count))
log_recipe <- recipe(count ~ ., data = log_bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes"))) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
prepped_pen_recipe <- prep(log_recipe)
bake(prepped_pen_recipe, new_data = log_bike)
## Penalized regression model10
preg_model <- linear_reg(penalty=1, mixture=1) %>% #Set model and tuning11
set_engine("glmnet") # Function to fit in R12
preg_wf <- workflow() %>%
add_recipe(log_recipe) %>%
add_model(preg_model) %>%
fit(data = log_bike)
predict(preg_wf, new_data = test)
log_recipe <- recipe(count ~ ., data = log_bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes"))) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
prepped_pen_recipe <- prep(log_recipe)
bake(prepped_pen_recipe, new_data = log_bike)
## Penalized regression model10
preg_model <- linear_reg(penalty=1, mixture=1) %>% #Set model and tuning11
set_engine("glmnet") # Function to fit in R12
preg_wf <- workflow() %>%
add_recipe(log_recipe) %>%
add_model(preg_model) %>%
fit(data = log_bike)
predict(preg_wf, new_data = test)
test <- vroom("./test.csv")
predict(preg_wf, new_data = test)
pen_predictions <- predict(preg_wf, new_data = test)
# Create a dataframe that only has datetime and predictions (To upload to Kaggle)
pen_predictions <- data.frame(test$datetime, pen_predictions)
colnames(pen_predictions) <- c('datetime', 'count')
# Change formatting of datetime
pen_predictions$datetime <- as.character(pen_predictions$datetime)
# Write that dataset to a csv file
vroom_write(pois_predictions, 'pen_predictions.csv', ",")
# Write that dataset to a csv file
vroom_write(pen_predictions, 'pen_predictions.csv', ",")
log_bike <- bike %>%
mutate(count=log(count))
log_recipe <- recipe(count ~ ., data = log_bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes"))) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
prepped_pen_recipe <- prep(log_recipe)
bake(prepped_pen_recipe, new_data = log_bike)
## Penalized regression model10
preg_model <- linear_reg(penalty=0, mixture=0) %>% #Set model and tuning11
set_engine("glmnet") # Function to fit in R12
preg_wf <- workflow() %>%
add_recipe(log_recipe) %>%
add_model(preg_model) %>%
fit(data = log_bike)
pen_predictions <- predict(preg_wf, new_data = test)
# Create a dataframe that only has datetime and predictions (To upload to Kaggle)
pen_predictions <- data.frame(test$datetime, pen_predictions)
colnames(pen_predictions) <- c('datetime', 'count')
# Change formatting of datetime
pen_predictions$datetime <- as.character(pen_predictions$datetime)
# Write that dataset to a csv file
vroom_write(pen_predictions, 'pen_predictions.csv', ",")
