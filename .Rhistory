abnb %>%
filter(`neighbourhood group` == 'Bronx')
bronx <- abnb %>%
filter(`neighbourhood group` == 'Bronx')
mean(bronx$price)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = mean(round(price)))
mean(bronx$price)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = round(mean(price)),2)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = round(mean(price),2))
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = mean(price))
library(tidyverse)
library(rvest)
url <- https://www.espn.com/nba/player/stats/_/id/3908845/john-collins
url <- 'https://www.espn.com/nba/player/stats/_/id/3908845/john-collins'
## Bike Share EDA Code
library(tidyverse)
library(vroom)
bike <- vroom("./train.csv")
setwd("/Users/tylersmith/Desktop/STAT348/KaggleBikeShare")
## Bike Share EDA Code
library(tidyverse)
library(vroom)
bike <- vroom("./train.csv")
## Bike Share EDA Code
library(tidyverse)
library(vroom)
bike <- vroom("./train.csv")
library(tidyverse)
library(vroom)
bike <- vroom("./train.csv")
DataExplorer::plot_intro(bike)
install.packages("DataExplorer")
DataExplorer::plot_intro(bike)
DataExplorer::plot_correlation(dataset)
DataExplorer::plot_correlation(bike)
DataExplorer::plot_bar(bike)
bike
view(bike)
ggplot(data = bike, aes(x = windspeed, y = count))
ggplot(data = bike, aes(x = windspeed, y = count)) +
geom_point()
# Variable types, missing values
DataExplorer::plot_intro(bike)
# Highlights key feature of collinearity within variables
DataExplorer::plot_correlation(bike)
# Highlights key feature of collinearity within variables
DataExplorer::plot_correlation(bike)
ggplot(data = bike, aes(x = windspeed, y = count)) +
geom_point()
DataExplorer::plot_missing(bike)
ggplot(data = bike, aes(x = workingday, y = count)) +
geom_boxplot()
ggplot(data = bike, aes(x = workingday, y = count), color = temp) +
geom_boxplot()
ggplot(data = bike, aes(x = season, y = count)) +
geom_boxplot()
ggplot(bike, aes(x = datetime, y = count), color = temp) +
geom_point()
ggplot(bike, aes(x = datetime, y = count, color = temp)) +
geom_point()
# Highlights key feature of collinearity within variables
plot1 <- DataExplorer::plot_correlation(bike)
plot3 <- ggplot(bike, aes(x = datetime, y = count, color = temp)) +
geom_point()
bike$season <- as.factor(bike$season)
ggplot(data = bike, aes(x = season, y = count)) +
geom_boxplot()
DataExplorer::plot_histrograms(bike)
DataExplorer::plot_histrograms(bike)
ggplot(bike, x = workingday, y = count, color = season) +
geom_violin() +
coord_flip()
ggplot(bike, aes(x = workingday, y = count, color = season)) +
geom_violin() +
coord_flip()
library(patchwork)
# Show distribution of workingday, count, and season
plot4 <- ggplot(bike, aes(x = workingday, y = count, color = season)) +
geom_violin() +
coord_flip()
(plot1 + plot2) / (plot3 + plot4)
# Boxplot of season and count
plot2 <- ggplot(data = bike, aes(x = season, y = count)) +
geom_boxplot()
(plot1 + plot2) / (plot3 + plot4)
four_panel <- (plot1 + plot2) / (plot3 + plot4)
ggsave(four_panel)
ggsave("four_panel.png")
install.packages('tidymodels')
install.packages("tidymodels")
install.packages("tidymodels")
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
install.packages('tidymodels')
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidyverse)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike %>%
filter(season ==4)
bike %>%
filter(weather == 4)
# Make season a factor
bike$season <- as.factor(bike$season)
bike %>%
filter(weather == 4 | weather == 3)
bike %>%
filter(weather == !4)
bike %>%
filter(weather !=4)
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
# Take out weather == 4 since there is only one
bike <- bike %>%
filter(weather !=4)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_rm(casual, registered)
my_recipe
bike
view(bike)
bike %>%
mutate(weather = ifelse(weather = 4,3,weather))
bike %>%
mutate(weather = ifelse(weather = 4,3,weather))
bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(timestamp, features=c("hour"))
prepped_recipe <- prep(my_recipe)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data = bikes_clean)
bake(prepped_recipe, new_data = bikes)
bake(prepped_recipe, new_data = bike)
view(bike)
bake(prepped_recipe, new_data = bike)
view(bike)
step_date(datetime, features = 'dow)'
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data = bike)
view(bake(prepped_recipe, new_data = bike))
my_recipe <- recipe(count ~ ., data = bike) %>%
step_date(datetime, features = 'dow')
prepped_recipe <- prep(my_recipe)
view(bake(prepped_recipe, new_data = bike))
my_recipe <- recipe(count ~ ., data = bike) %>%
step_date(datetime, features = 'dow') %>%
step_rm(registered, casual)
prepped_recipe <- prep(my_recipe)
view(bake(prepped_recipe, new_data = bike))
my_recipe <- recipe(count ~ ., data = bike) %>%
step_date(datetime, features = 'dow') %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
view(bake(prepped_recipe, new_data = bike))
bike_clean <- bake(prepped_recipe, new_data = bike)
view(bike_clean)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
# Take out weather == 4 since there is only one
bike %>%
filter(weather !=4)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_date(datetime, features = 'dow') %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
test$season <- as.factor(bike$season)
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike_clean) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
view(test)
view(test)
bike %>%
select(-casual, -registered)
view(bike %>%
select(-casual, -registered))
bike <- bike %>%
select(-casual, -registered)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_date(datetime, features = 'dow') %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_predictions <- predict(bike_workflow,
new_data = test)
view(bike)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike_clean) # Fit the workflow
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
bike_predictions <- predict(bike_workflow,
new_data = test)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_rm(registered, casual) %>%
step_time(datetime, features=c("hour"))
prepped_recipe <- prep(my_recipe)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather)) %>%
select(-casual, -registered)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather)) %>%
# Make factors
bike$season <- as.factor(bike$season)
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour"))
bike <- bike %>%
mutate(weather = ifelse(weather == 4,3,weather))
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour"))
test$season <- as.factor(test$season)
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
rm(list=ls())
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather))
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_predictions
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
# Make factors
bike$season <- as.factor(bike$season)
bike$holiday <- as.factor(bike$holiday)
bike$workingday <- as.factor(bike$workingday)
bike$weather <- as.factor(bike$weather)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
bike_predictions
bike_predictions[bike_predictions < 0] <- 1
bike_predictions
# Round negative numbers to 1 because we can't have negatives
bike_predictions[bike_predictions < 0] <- 0
bike_predictions
bike_predictions[bike_predictions < 0] <- 0
bike_predictions
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
my_recipe <- recipe(count ~ ., data = bike) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes")))
prepped_recipe <- prep(my_recipe)
bike_clean <- bake(prepped_recipe, new_data = bike)
test <- vroom("./test.csv")
my_mod <- linear_reg() %>% # Type of model
set_engine('lm') #Engine = What R Function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data = test)
# Round negative numbers to 1 because we can't have negatives
bike_predictions[bike_predictions < 0] <- 0
bike_predictions
predictions <- data.frame(bike$datetime, bike$count)
head(predictions)
colnames(predictions) <- c('datetime', 'count')
head(predictions)
vroom_write(predictions, 'csv', ",")
vroom_write(predictions, 'predictions.csv', ",")
predictions$datetime <- as.character(predictions$datetime)
vroom_write(predictions, 'predictions.csv', ",")
view(bike_predictions)
predictions <- data.frame(test$datetime, test$count)
colnames(predictions) <- c('datetime', 'count')
head(predictions)
predictions <- data.frame(test$datetime, bike_predictions)
colnames(predictions) <- c('datetime', 'count')
head(predictions)
predictions$datetime <- as.character(predictions$datetime)
vroom_write(predictions, 'predictions.csv', ",")
